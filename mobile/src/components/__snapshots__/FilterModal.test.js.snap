// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FilterModal> fetchs data on load 1`] = `
<Modal
  animationType="none"
  fetchData={
    [MockFunction] {
      "calls": Array [
        Array [
          "test",
        ],
      ],
    }
  }
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onModalHide={[Function]}
  onRequestClose={[Function]}
  onSelectChange={[MockFunction]}
  swipeThreshold={100}
  transparent={true}
  type="test"
  visible={false}
>
  <View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    collapsable={undefined}
    hitSlop={undefined}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "black",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
    testID={undefined}
  />
  <View
    keyboardVerticalOffset={0}
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Array [
          Object {
            "margin": 37.5,
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          },
          Object {
            "flex": 1,
            "justifyContent": "center",
          },
          Object {
            "flex": 0.8,
          },
          Object {
            "margin": 0,
          },
        ],
        Object {
          "paddingBottom": 0,
        },
      ]
    }
  >
    <View
      collapsable={undefined}
      fetchData={
        [MockFunction] {
          "calls": Array [
            Array [
              "test",
            ],
          ],
        }
      }
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onSelectChange={[MockFunction]}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 0.8,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      swipeThreshold={100}
      type="test"
    >
      <View
        style={
          Array [
            Object {},
            Object {
              "backgroundColor": "white",
              "flex": 1,
            },
          ]
        }
        virtual={undefined}
      >
        <RCTScrollView
          dataSource={
            ListViewDataSource {
              "items": 0,
            }
          }
          renderRow={[Function]}
          renderScrollComponent={[Function]}
          style={Object {}}
        >
          <View />
        </RCTScrollView>
      </View>
    </View>
  </View>
</Modal>
`;

exports[`<FilterModal> loads items 1`] = `
<Modal
  animationType="none"
  fetchData={
    [MockFunction] {
      "calls": Array [
        Array [
          "test",
        ],
      ],
    }
  }
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onModalHide={[Function]}
  onRequestClose={[Function]}
  onSelectChange={[MockFunction]}
  refData={
    Object {
      "ref": Array [
        Object {
          "id": 1,
          "value": "x",
        },
        Object {
          "id": 2,
          "value": "y",
        },
      ],
    }
  }
  swipeThreshold={100}
  transparent={true}
  type="test"
  visible={false}
>
  <View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    collapsable={undefined}
    hitSlop={undefined}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "black",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
    testID={undefined}
  />
  <View
    keyboardVerticalOffset={0}
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Array [
          Object {
            "margin": 37.5,
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          },
          Object {
            "flex": 1,
            "justifyContent": "center",
          },
          Object {
            "flex": 0.8,
          },
          Object {
            "margin": 0,
          },
        ],
        Object {
          "paddingBottom": 0,
        },
      ]
    }
  >
    <View
      collapsable={undefined}
      fetchData={
        [MockFunction] {
          "calls": Array [
            Array [
              "test",
            ],
          ],
        }
      }
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onSelectChange={[MockFunction]}
      pointerEvents="box-none"
      refData={
        Object {
          "ref": Array [
            Object {
              "id": 1,
              "value": "x",
            },
            Object {
              "id": 2,
              "value": "y",
            },
          ],
        }
      }
      style={
        Object {
          "flex": 0.8,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      swipeThreshold={100}
      type="test"
    >
      <View
        style={
          Array [
            Object {},
            Object {
              "backgroundColor": "white",
              "flex": 1,
            },
          ]
        }
        virtual={undefined}
      >
        <RCTScrollView
          dataSource={
            ListViewDataSource {
              "items": 2,
            }
          }
          renderRow={[Function]}
          renderScrollComponent={[Function]}
          style={Object {}}
        >
          <View>
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              hitSlop={undefined}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#ffffff",
                    "borderBottomColor": "#cccccc",
                    "borderBottomWidth": 1,
                    "flex": 1,
                    "flexDirection": "row",
                    "padding": 15,
                  },
                  Object {},
                ]
              }
              testID={undefined}
            >
              <Image
                source={
                  Object {
                    "testUri": "../../react-native-select-multiple/images/icon-checkbox.png",
                  }
                }
                style={
                  Array [
                    Object {
                      "height": 24,
                      "marginRight": 5,
                      "width": 24,
                    },
                    Object {},
                  ]
                }
              />
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {},
                    Object {},
                  ]
                }
              >
                x
              </Text>
            </View>
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              hitSlop={undefined}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#ffffff",
                    "borderBottomColor": "#cccccc",
                    "borderBottomWidth": 1,
                    "flex": 1,
                    "flexDirection": "row",
                    "padding": 15,
                  },
                  Object {},
                ]
              }
              testID={undefined}
            >
              <Image
                source={
                  Object {
                    "testUri": "../../react-native-select-multiple/images/icon-checkbox.png",
                  }
                }
                style={
                  Array [
                    Object {
                      "height": 24,
                      "marginRight": 5,
                      "width": 24,
                    },
                    Object {},
                  ]
                }
              />
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {},
                    Object {},
                  ]
                }
              >
                y
              </Text>
            </View>
          </View>
        </RCTScrollView>
      </View>
    </View>
  </View>
</Modal>
`;

exports[`<FilterModal> renders without crashing 1`] = `
<Modal
  animationType="none"
  fetchData={
    [MockFunction] {
      "calls": Array [
        Array [
          undefined,
        ],
      ],
    }
  }
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onModalHide={[Function]}
  onRequestClose={[Function]}
  onSelectChange={[MockFunction]}
  swipeThreshold={100}
  transparent={true}
  visible={false}
>
  <View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    collapsable={undefined}
    hitSlop={undefined}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "black",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
    testID={undefined}
  />
  <View
    keyboardVerticalOffset={0}
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Array [
          Object {
            "margin": 37.5,
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          },
          Object {
            "flex": 1,
            "justifyContent": "center",
          },
          Object {
            "flex": 0.8,
          },
          Object {
            "margin": 0,
          },
        ],
        Object {
          "paddingBottom": 0,
        },
      ]
    }
  >
    <View
      collapsable={undefined}
      fetchData={
        [MockFunction] {
          "calls": Array [
            Array [
              undefined,
            ],
          ],
        }
      }
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onSelectChange={[MockFunction]}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 0.8,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      swipeThreshold={100}
    >
      <View
        style={
          Array [
            Object {},
            Object {
              "backgroundColor": "white",
              "flex": 1,
            },
          ]
        }
        virtual={undefined}
      >
        <RCTScrollView
          dataSource={
            ListViewDataSource {
              "items": 0,
            }
          }
          renderRow={[Function]}
          renderScrollComponent={[Function]}
          style={Object {}}
        >
          <View />
        </RCTScrollView>
      </View>
    </View>
  </View>
</Modal>
`;
